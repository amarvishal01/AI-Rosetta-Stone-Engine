[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-rosetta-stone"
version = "0.1.0"
authors = [
    {name = "AI Rosetta Stone Team", email = "contact@ai-rosetta-stone.org"}
]
description = "Neuro-Symbolic Engine for AI Regulatory Compliance"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Legal Industry", 
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Other/Nonlisted Topic",
]
dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "tensorflow>=2.13.0",
    "scikit-learn>=1.3.0",
    "transformers>=4.30.0",
    "numpy>=1.24.0",
    "sympy>=1.12",
    "pyswip>=0.2.10",
    "rdflib>=6.3.0",
    "owlready2>=0.43",
    "spacy>=3.6.0",
    "nltk>=3.8.0",
    "sentence-transformers>=2.2.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.22.0",
    "pydantic>=2.0.0",
    "pandas>=2.0.0",
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "matplotlib>=3.7.0",
    "plotly>=5.15.0",
    "jinja2>=3.1.0",
    "weasyprint>=59.0",
    "python-dotenv>=1.0.0",
    "click>=8.1.0",
    "tqdm>=4.65.0",
    "loguru>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.4.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
gpu = [
    "torch[cuda]>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/ai-rosetta-stone/ai-rosetta-stone"
Documentation = "https://ai-rosetta-stone.readthedocs.io"
Repository = "https://github.com/ai-rosetta-stone/ai-rosetta-stone.git"
"Bug Tracker" = "https://github.com/ai-rosetta-stone/ai-rosetta-stone/issues"

[project.scripts]
rosetta-stone = "rosetta_stone.cli:main"

[tool.setuptools.packages.find]
include = ["rosetta_stone*"]

[tool.setuptools.package-data]
rosetta_stone = [
    "data/*.json",
    "data/*.owl", 
    "reporting/templates/*.html",
    "reporting/templates/*.css",
]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "tensorflow.*",
    "sklearn.*",
    "transformers.*",
    "spacy.*",
    "nltk.*",
    "rdflib.*",
    "owlready2.*",
    "pyswip.*",
    "plotly.*",
    "weasyprint.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["rosetta_stone"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]